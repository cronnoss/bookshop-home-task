// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/cronnoss/bookshop-home-task/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// CategoryService is an autogenerated mock type for the CategoryService type
type CategoryService struct {
	mock.Mock
}

type CategoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *CategoryService) EXPECT() *CategoryService_Expecter {
	return &CategoryService_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: ctx, category
func (_m *CategoryService) CreateCategory(ctx context.Context, category domain.Category) (domain.Category, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Category) (domain.Category, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Category) domain.Category); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryService_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type CategoryService_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category domain.Category
func (_e *CategoryService_Expecter) CreateCategory(ctx interface{}, category interface{}) *CategoryService_CreateCategory_Call {
	return &CategoryService_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, category)}
}

func (_c *CategoryService_CreateCategory_Call) Run(run func(ctx context.Context, category domain.Category)) *CategoryService_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Category))
	})
	return _c
}

func (_c *CategoryService_CreateCategory_Call) Return(_a0 domain.Category, _a1 error) *CategoryService_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryService_CreateCategory_Call) RunAndReturn(run func(context.Context, domain.Category) (domain.Category, error)) *CategoryService_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: ctx, id
func (_m *CategoryService) DeleteCategory(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CategoryService_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type CategoryService_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *CategoryService_Expecter) DeleteCategory(ctx interface{}, id interface{}) *CategoryService_DeleteCategory_Call {
	return &CategoryService_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, id)}
}

func (_c *CategoryService_DeleteCategory_Call) Run(run func(ctx context.Context, id int)) *CategoryService_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CategoryService_DeleteCategory_Call) Return(_a0 error) *CategoryService_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CategoryService_DeleteCategory_Call) RunAndReturn(run func(context.Context, int) error) *CategoryService_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategories provides a mock function with given fields: ctx
func (_m *CategoryService) GetCategories(ctx context.Context) ([]domain.Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCategories")
	}

	var r0 []domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryService_GetCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategories'
type CategoryService_GetCategories_Call struct {
	*mock.Call
}

// GetCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CategoryService_Expecter) GetCategories(ctx interface{}) *CategoryService_GetCategories_Call {
	return &CategoryService_GetCategories_Call{Call: _e.mock.On("GetCategories", ctx)}
}

func (_c *CategoryService_GetCategories_Call) Run(run func(ctx context.Context)) *CategoryService_GetCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CategoryService_GetCategories_Call) Return(_a0 []domain.Category, _a1 error) *CategoryService_GetCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryService_GetCategories_Call) RunAndReturn(run func(context.Context) ([]domain.Category, error)) *CategoryService_GetCategories_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategory provides a mock function with given fields: ctx, id
func (_m *CategoryService) GetCategory(ctx context.Context, id int) (domain.Category, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategory")
	}

	var r0 domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Category); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryService_GetCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategory'
type CategoryService_GetCategory_Call struct {
	*mock.Call
}

// GetCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *CategoryService_Expecter) GetCategory(ctx interface{}, id interface{}) *CategoryService_GetCategory_Call {
	return &CategoryService_GetCategory_Call{Call: _e.mock.On("GetCategory", ctx, id)}
}

func (_c *CategoryService_GetCategory_Call) Run(run func(ctx context.Context, id int)) *CategoryService_GetCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CategoryService_GetCategory_Call) Return(_a0 domain.Category, _a1 error) *CategoryService_GetCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryService_GetCategory_Call) RunAndReturn(run func(context.Context, int) (domain.Category, error)) *CategoryService_GetCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: ctx, category
func (_m *CategoryService) UpdateCategory(ctx context.Context, category domain.Category) (domain.Category, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 domain.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Category) (domain.Category, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Category) domain.Category); ok {
		r0 = rf(ctx, category)
	} else {
		r0 = ret.Get(0).(domain.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Category) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryService_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type CategoryService_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category domain.Category
func (_e *CategoryService_Expecter) UpdateCategory(ctx interface{}, category interface{}) *CategoryService_UpdateCategory_Call {
	return &CategoryService_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, category)}
}

func (_c *CategoryService_UpdateCategory_Call) Run(run func(ctx context.Context, category domain.Category)) *CategoryService_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Category))
	})
	return _c
}

func (_c *CategoryService_UpdateCategory_Call) Return(_a0 domain.Category, _a1 error) *CategoryService_UpdateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CategoryService_UpdateCategory_Call) RunAndReturn(run func(context.Context, domain.Category) (domain.Category, error)) *CategoryService_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewCategoryService creates a new instance of CategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCategoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CategoryService {
	mock := &CategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
